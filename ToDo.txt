1) общий вольюм на локалке с контейнером через композ +

    сделали через .env
    в последствии там пользоватаель будет ставить путь к своей папке с картинками

    прокинем через environment: в docer-compose фале путь к общей между хостом и контейнерами папке 
    чтобы было удобно вынимать этот путь в коде классификатора и т.д. 


    можно будет сделать как раньше еще 1 вольюм чисто для контейнеров где они смогут писать и читать txt файлы и т.п.

2) посылать комманды от 1 контейнера к другому (кнопка на веб странице) - 

    curl
        каждый контенер должен иметь что-то, что будет прослкшивать порт другого 
        один из контейнеро послыет POST запросы в другой черз API того что используем

        тот кто принимаает должен уметь выполнять код на питоне по типу запускать классификатор

        если линковать конейтнеры в копосе links: - "core:ai" то адрес можно будет заменять на это название
        в нашм случае к контейнеру core можно будет обратиться как ai

        поискал как делается на node.js
        https://nodejs.dev/learn/make-an-http-post-request-using-nodejs

        '''''''''''''''''''''''''''''''
            const axios = require('axios')

            axios
            .post('ai/страница куда послыем', {
                название аргумента: то что хотим передать
            })

        '''''''''''''''''''''''''''''

        так как у нас контейнер с нейронкой это питон 
        то можно попробывать обработать этот запрос на django

        но для этого его нужно поставить 

        придется прописать apt install и скорее всего добавить перемнных окружения,
        будем надеятся что django можно будет запусть через 
        
        command: python djangoapp.py

        в docker-compose файле

        https://stackoverflow.com/questions/16053865/handling-requests-in-django

        '''''''''''''''''''''''''''''''''''''''''''

            def test(request):
            #Do your regular get method processes here
            if request.POST:
                #Do something with post data here
                здесь будем отлавливать и сопоствалять строки и питоном запускать другие питон файлы 
        
        '''''''''''''''''''''''''''''''''''''

        так можно запускать баш скрипты из питона, так как они (баш скрипты) видять переменные окружения,
        а их будем передавать как параметы в скриты питона, а впитоне брать их как sys.argv[1] (уже сделано в classifire.py)

        ''''''''''''''''''''''''''''''''''''''''

            import subprocess

            subprocess.call("classify_script.sh")

        '''''''''''''''''''''''''''''''''''''''

        ппередавать будем путь к папке с пикчами, которую пользователь зашарил как вольюм в .env в переменную APP_PATH_HOST=
        п результат записывать в .csv колонка название пикчи и колонка ее классификатор

        например
        
            picture_name;class
            picture1;3.27

        вывод инфорцаии пока можно будет оставить через чтение txt файлов контейнером на node.js

    


  